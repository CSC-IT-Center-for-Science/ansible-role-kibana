---

  - name: template in kibana yum repo config
    template: src=kibana.repo dest=/etc/yum.repos.d/kibana.repo mode=0644
    when: kibana_branch != "5.x"

  - name: install kibana 
    package: name=kibana state=installed
    register: reg_install_kibana

  - name: send in kibana4's config.yml
    template: src={{ kibana4_config_yml }} dest=/opt/kibana/config/kibana.yml owner=kibana group=kibana mode=0644 backup=yes
    notify:
      - restart kibana
    when: kibana_branch != "5.x"

  - name: send in kibana5's config.yml
    template: src={{ kibana5_config_yml }} dest=/etc/kibana/kibana.yml owner=kibana group=kibana mode=0644 backup=yes
    notify:
      - restart kibana
    when: kibana_branch == "5.x"

  - name: grab cluster health
    action: uri url=http://localhost:{{ es_http_port }}/_cluster/health return_content=yes
    register: clusterhealth
    check_mode: True
    when: reg_install_kibana|success

  - name: Display cluster health
    debug: var=clusterhealth verbosity=1

  - name: install kibana 4.x plugins 
    command: /opt/kibana/bin/kibana plugin -i {{ item }}
    when: kibana4_plugins.0 != "" and kibana_branch != "5.x"
    with_items: "{{Â kibana4_plugins }}"
    notify:
      - restart kibana
    ignore_errors: True

  - name: set kibana user as owner recursively in /opt/kibana/optimize
    file: path=/opt/kibana/optimize state=directory owner=kibana recurse=yes
    when: kibana_branch == "4.x"

  - name: Display kibana_plugin_install
    debug: var=kibana4_plugin_install verbosity=1
    when: kibana_branch != "5.x"

  - name: start and enable kibana service
    service: name=kibana enabled=yes state=started
